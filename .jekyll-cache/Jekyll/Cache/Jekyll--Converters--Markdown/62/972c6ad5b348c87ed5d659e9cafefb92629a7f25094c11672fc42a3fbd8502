I"<p>Every object is Ruby is an instance of class <code class="language-plaintext highlighter-rouge">BasicObject</code>. We can say that class <code class="language-plaintext highlighter-rouge">Object</code> is the parent of all the classes and class <code class="language-plaintext highlighter-rouge">BasicObject</code> is the parent of <code class="language-plaintext highlighter-rouge">Object</code>. And that is the way method lookup is Ruby works. But, the method lookup has more elements to it. Mixing of modules complicates the matter a bit.</p>

<p>When the method is invoked, receiver checks its class for the method. If it finds the method it executes it. If not, it looks for it in any module that was
included. If the method is not found in that as well, it traverses up to the parent of the class which is <code class="language-plaintext highlighter-rouge">Object</code> and looks for the method. If it finds the method, its executed, if not, it traverses up to its parent class which is <code class="language-plaintext highlighter-rouge">BasicObject</code>. If the method is not present in <code class="language-plaintext highlighter-rouge">BasicObject</code> as well, it executes <code class="language-plaintext highlighter-rouge">method_missing</code>.</p>

<p>In the example below, we have class <code class="language-plaintext highlighter-rouge">User</code>, whose parent is class <code class="language-plaintext highlighter-rouge">Object</code> and has a module <code class="language-plaintext highlighter-rouge">Naming</code> included to it. <code class="language-plaintext highlighter-rouge">Object</code> has a parent <code class="language-plaintext highlighter-rouge">BasicObject</code> and includes an inbuilt module <code class="language-plaintext highlighter-rouge">Kernel</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">BasicObject</span>                 <span class="c1"># Parent class of Object</span>
    <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
      <span class="k">raise</span> <span class="s2">"method not found"</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="k">module</span> <span class="nn">Kernel</span>                     <span class="c1"># Mixed in Kernel module</span>
  <span class="k">end</span>
       
  <span class="k">class</span> <span class="nc">Object</span> <span class="o">&lt;</span> <span class="no">BasicObject</span>        <span class="c1"># Parent class of User</span>
    <span class="kp">include</span> <span class="no">Kernel</span>
    <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
      <span class="k">super</span>
     <span class="k">end</span>
  <span class="k">end</span>
       
  <span class="k">module</span> <span class="nn">Naming</span>                    <span class="c1"># Mixed in Naming module</span>
  <span class="k">end</span>
       
  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Object</span>              <span class="c1"># Class User created by us           </span>
    <span class="kp">include</span> <span class="no">Naming</span>
  <span class="k">end</span>
       
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">say_hello</span>                   <span class="c1"># Looking for method say_hello</span>
   
</code></pre></div></div>

<p>Diagrammatic representation of method lookup in case of our example.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> class BasicObject (Method lookup ends at this point. Finally reaching BasicObject class. Does not find say_hello here also and executes method method_missing.)
       /\
       | 
 module Kernel     (Tries to locate say_hello in module Kernel. Does not find it.)
       /\
       |
 class Object      (Moves on to the parent class of the User, and tries to locate say_hello. Does not find it.)
       /\
       |
 module Naming     (Proceeds to find say_hello in module Naming. Does not find it.)
       /\
       |
 class User        (Tries to find say_hello in class User, but does not find it.)
       /\
       |
 user.say_hello    (Lookup starts from this point. Method say_hello is invoked)
 
</code></pre></div></div>
:ET
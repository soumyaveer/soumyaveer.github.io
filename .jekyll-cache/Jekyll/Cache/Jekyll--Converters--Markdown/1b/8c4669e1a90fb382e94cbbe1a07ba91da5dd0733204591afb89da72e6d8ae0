I"ý <p>What are <strong>Blocks</strong> , <strong>Procs</strong> and <strong>Lambdas</strong> ? 
They are a group of statements that can be executed. They all might look similar and they are the extension of same concept <code class="language-plaintext highlighter-rouge">callable objects</code> in Ruby, but they have subtle differences.</p>

<ul>
  <li>
    <p><strong>Blocks</strong>:</p>

    <ul>
      <li>A block is a way of grouping statements. They may appear only in the source adjacent to the method calls.</li>
      <li>They are a piece of code that accepts arguments, and returns a value and are always passed to a method call.</li>
      <li>
        <p>Rubyâ€™s standard is to use braces for the single line blocks <code class="language-plaintext highlighter-rouge">{}</code> and <code class="language-plaintext highlighter-rouge">do end</code> for the multiline blocks.</p>

        <p>Example:</p>
      </li>
    </ul>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    
   <span class="c1"># Single line block</span>
   <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
   
		
     <span class="c1">#multi line block</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
      <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span>  <span class="c1"># block is everything between the do and end</span>
    <span class="k">end</span>
      
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Procs</strong>:</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">Proc</code> objects are block of code that have been bound to a set of local variables. Once bound the code might be called in different contexts and still access those variables.</li>
    </ul>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">toast</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s1">'Hello World!'</span>
   <span class="k">end</span>
          
  <span class="n">toast</span><span class="p">.</span><span class="nf">call</span> <span class="c1">#=&gt; returns "Hello World!"</span>
</code></pre></div>    </div>

    <p>Together <code class="language-plaintext highlighter-rouge">blocks</code> and <code class="language-plaintext highlighter-rouge">procs</code>, is the ability to take a block of code (code in between do and end), wrap it up in an object (called a <em>proc</em>), store it in a variable or pass it to a method, and run the code in the block whenever you feel like (more than once, if you want). 
We use <code class="language-plaintext highlighter-rouge">procs</code> when we want to wrap a block in object and pass it around.</p>

    <p>The table below might make the difference between <code class="language-plaintext highlighter-rouge">blocks</code> and <code class="language-plaintext highlighter-rouge">procs</code> clearer.</p>

    <table>
      <thead>
        <tr>
          <th>SN</th>
          <th><em>Procs</em></th>
          <th><em>Blocks</em></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>1.</td>
          <td>Procs are objects</td>
          <td>Blocks are not objects</td>
        </tr>
        <tr>
          <td>2.</td>
          <td>You can pass multiple Procs in a method</td>
          <td>Atmost one block can appear in an argument list</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Lambda</strong>:</p>

    <ul>
      <li>
        <p>Similar to <code class="language-plaintext highlighter-rouge">proc</code>, <code class="language-plaintext highlighter-rouge">lambda</code> returns the a <code class="language-plaintext highlighter-rouge">Proc</code> object, using the provided code block.</p>

        <p>Though <code class="language-plaintext highlighter-rouge">proc</code> and <code class="language-plaintext highlighter-rouge">lambda</code> both return an object, they are different. The table below might make them a bit clearer.</p>
      </li>
    </ul>

    <table>
      <thead>
        <tr>
          <th>Sn.</th>
          <th><em>Procs</em></th>
          <th><em>Lambda</em></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>1.</td>
          <td>Procs do not check the number of arguments being passed to it.</td>
          <td>Checks number of arguments being passed to it.</td>
        </tr>
        <tr>
          <td>Â </td>
          <td>When no arguments are passed, it assigns nil value to variables</td>
          <td>If arguments are required and not passed, it raises exception</td>
        </tr>
        <tr>
          <td>2.</td>
          <td>When <code class="language-plaintext highlighter-rouge">return</code> is called in Proc, it exits the method it is called in</td>
          <td>When <code class="language-plaintext highlighter-rouge">return</code> is called inside lambda, it exits the lambda code</td>
        </tr>
        <tr>
          <td>3.</td>
          <td>No explicit creation required. Using a <code class="language-plaintext highlighter-rouge">call</code> on block, creates a <code class="language-plaintext highlighter-rouge">proc</code> object</td>
          <td>Needs to be created explicitly</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        
  <span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>    <span class="c1"># creates a lambda that takes 1 argument</span>
  <span class="n">lam</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                    <span class="c1"># prints out 2</span>
  <span class="n">lam</span><span class="p">.</span><span class="nf">call</span>                       <span class="c1"># ArgumentError: wrong number of arguments (0 for 1)</span>
  <span class="n">lam</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>                <span class="c1"># ArgumentError: wrong number of arguments (3 for 1)</span>
         
  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># creates a proc that takes 1 argument</span>
  <span class="nb">proc</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                   <span class="c1"># prints out 2</span>
  <span class="nb">proc</span><span class="p">.</span><span class="nf">call</span>                      <span class="c1"># returns nil</span>
  <span class="nb">proc</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>               <span class="c1"># prints out 1 and forgets about the extra arguments</span>
      
</code></pre></div>    </div>
  </li>
</ul>
:ET
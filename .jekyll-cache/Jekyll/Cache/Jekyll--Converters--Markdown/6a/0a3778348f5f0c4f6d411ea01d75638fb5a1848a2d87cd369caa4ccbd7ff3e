I"<p>In the last post we talked about Variables.</p>

<p>Variables can also be declared as a constant. <strong>Constant</strong> starts with uppercase letters, like so,  <code class="language-plaintext highlighter-rouge">PI = 3.14</code>. Declared inside the class their scope is within the class. Declared outside, they can be accessed globally.</p>

<p>But declaring a constant variable makes it immutable? No. It does not.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    VAR1 = 10
    &gt; 10
    VAR1 = 20
    (irb):2: warning: already initialized constant VAR1
    (irb):1: warning: previous definition of VAR1 was here
    &gt; 20
</code></pre></div></div>

<p>Trying to change a constant will throw a warning but it can still be mutated.</p>

<p>Do we have a way to make constants immutable?</p>

<p>Yes, we do! The answer is - <strong>Freeze</strong>.</p>

<p>Objects in Ruby can be frozen using <code class="language-plaintext highlighter-rouge">Object.freeze</code> method. <strong>Freeze</strong> creates constants that canâ€™t mutate.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    numbers = [1, 2, 3]
 
    numbers.frozen?
    &gt; false
 
    numbers.freeze
 
    numbers &lt;&lt; 4
    &gt; RuntimeError: can't modify frozen Array
 
    numbers.frozen?
    &gt; true
 
    numbers = [5, 6, 7] 
    &gt; [5, 6, 7] #object_id chages. Now it is pointing to different object.
</code></pre></div></div>
:ET
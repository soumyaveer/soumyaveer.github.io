I"B2<p>When I started learning Rails, I was extremely confused in associations. They are like a maze in which getting lost is easy.</p>

<p><strong>Associations</strong> serve as link between models. They make performing operations on the records easier.</p>

<p>So, let’s take plunge into the details of Associations!</p>

<p>There are four types of associations.</p>
<ol>
  <li>One-to-Many</li>
  <li>One-to-one</li>
  <li>Many-to-Many</li>
  <li>Polymorphic One-to-Many</li>
</ol>

<p><br /></p>
<ol>
  <li><strong>One-to-Many</strong> : <a href="http://guides.rubyonrails.org/association_basics.html#the-has-many-association">One-to-Many</a> is one of
  the most commonly used association. It states that an instance of model has many instances of another model.
  For example, A student is enrolled in a University but a University has many students.<br />
  We can say : <br />
  <em>A Student <code class="language-plaintext highlighter-rouge">belongs_to</code> a University.</em><br />
<em>A University <code class="language-plaintext highlighter-rouge">has_many</code> Students.</em> <br />
<br />
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
    <span class="n">belongs_to</span> <span class="ss">:university</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">University</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
     <span class="n">has_many</span> <span class="ss">:students</span>
  <span class="k">end</span>
</code></pre></div>    </div>
    <p><br />
 <code class="language-plaintext highlighter-rouge">belongs_to</code> is usually on the other side of has_many or has_one relationship.</p>

    <p>Once we establish <em>One-to-Many</em> association, we get some very useful methods at our disposal:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">university.students</code> : gives us all the students, enrolled in a university.</li>
      <li><code class="language-plaintext highlighter-rouge">student.university</code> : gives us the name of university student is enrolled in.</li>
      <li><code class="language-plaintext highlighter-rouge">university.students &lt;&lt; student1</code> : adds student1 to the collection and returns the collection.</li>
      <li><code class="language-plaintext highlighter-rouge">university.students.delete(@student1)</code> : deletes student1 from the collection. Sets foreign key to null.</li>
      <li><code class="language-plaintext highlighter-rouge">university.students.destroy(@student1)</code> : removes @student1 from collection by running destroy on each object.</li>
      <li><code class="language-plaintext highlighter-rouge">university.students.build({ })</code> : instantiates a new student but does not save it.</li>
      <li><code class="language-plaintext highlighter-rouge">university.students.create({ })</code> : validates and creates a new student and saves it in the database.</li>
      <li><code class="language-plaintext highlighter-rouge">university.students.create!({})</code> : validates, creates and saves student in database, but returns the exception in case of failure.</li>
      <li><code class="language-plaintext highlighter-rouge">university.build_student</code> : instantiates a new student but does not save it.</li>
      <li><code class="language-plaintext highlighter-rouge">university.create_student</code> : creates a new student and saves it in the database.<br />
<br />
<br /></li>
    </ul>
  </li>
  <li><strong>One-to-One</strong> : <a href="http://guides.rubyonrails.org/association_basics.html#the-has-one-association">One-to-One</a>
  association states that one instance of model contains exactly one instance of other model.
 What that means is, for example:  A student has one University Account. One University Account belongs to one Student<br />
  We can say:<br />
 <em>A student <code class="language-plaintext highlighter-rouge">has_one</code> Account</em><br />
 <em>An Account <code class="language-plaintext highlighter-rouge">belongs_to</code> a Student</em><br />
 <br />
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">has_one</span> <span class="ss">:account</span>
 <span class="k">end</span>

 <span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">belongs_to</span> <span class="ss">:student</span>
 <span class="k">end</span>
</code></pre></div>    </div>
    <p><br />
 After the relation is established, in <em>One-to-One</em> as well we get few useful methods:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">student.account</code> : gets the account details for the student.</li>
      <li><code class="language-plaintext highlighter-rouge">student.build_account</code> : instantiates the new account but does not save it.</li>
      <li><code class="language-plaintext highlighter-rouge">student.create_adress</code> : validates, creates and saves new address to the database.<br />
 <br />
<br /></li>
    </ul>
  </li>
  <li>
    <p><strong>Many-to-Many</strong> : This association says that many instances of model has many instances of another model. It needs
a join table which stores the relation between the two models.</p>

    <p>It can be set up in two ways :<br />
 a) <em>Has_And_Belongs_To_Many (HABTM)</em>: In case of <a href="http://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association">Has And Belongs To Many</a>
   , lets take an example and say, Teachers teach many Students and Students are taught by many Teachers.
We can say it as :<br />
  <em>Teacher <code class="language-plaintext highlighter-rouge">has_and_belongs_to_many</code> Students</em><br />
  <em>Student <code class="language-plaintext highlighter-rouge">has_and_belongs_to_many</code> Teachers</em><br /></p>

    <p>In this case the join table name by default will be <code class="language-plaintext highlighter-rouge">students_teachers</code>, but can be customized by the programmer.
<br />
<br /></p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">has_and_belongs_to_many</span> <span class="ss">:students</span>
 <span class="k">end</span>

 <span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">has_and_belongs_to_many</span> <span class="ss">:teachers</span>
 <span class="k">end</span>
</code></pre></div>    </div>
    <p><br /></p>

    <p>Now, with the establishment of <em>HABTM</em> relation, we get another set of methods to play around with:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">student.teachers</code>: all teachers teaching a particular student</li>
      <li><code class="language-plaintext highlighter-rouge">student.teacher_ids</code>: returns ids from the colection</li>
      <li><code class="language-plaintext highlighter-rouge">student.teacher_ids = [1, 2, 3]</code> : creates collection with objects corresponding to PK values supplied.</li>
      <li><code class="language-plaintext highlighter-rouge">student.teachers.delete(teacher_1)</code> or <code class="language-plaintext highlighter-rouge">student.teachers.destroy(teacher_1)</code>: deletes or destroys the relations for teacher_1</li>
      <li><code class="language-plaintext highlighter-rouge">teachers.empty?</code> : checks if teachers contains data</li>
      <li><code class="language-plaintext highlighter-rouge">teachers.size</code> : checks the size of teachers collection</li>
      <li><code class="language-plaintext highlighter-rouge">student.teachers.create(attributes = {})</code>: creates and adds objects to the collection.</li>
    </ul>

    <p><br />
 <em>HABTM</em> is an approach which looks easy, but it is very rigid in the sense that we gain almost no flexibility
  of working with the relationship model. This problem is solved using <em>Has Many Through</em> relation.
<br />
<br />
b) <em>Has Many Through</em> :
<a href="http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association">Has Many Through</a> is a more flexible approach under <em>many_to_many</em> relation.
Let’s say that Students in a university are to be sent many reminders for events and each event has many students attending it.<br />
We can say: <br />
    <em>Students <code class="language-plaintext highlighter-rouge">has_many</code> Reminders <code class="language-plaintext highlighter-rouge">through</code> StudentsReminder</em><br />
    <em>Reminders <code class="language-plaintext highlighter-rouge">has_many</code> Students <code class="language-plaintext highlighter-rouge">through</code> StudentsReminder</em><br />
    <em>StudentsReminder <code class="language-plaintext highlighter-rouge">belongs_to</code> Students and Reminders</em><br />
 <br /></p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
      <span class="n">has_many</span> <span class="ss">:students_reminders</span>
      <span class="n">has_many</span> <span class="ss">:reminders</span><span class="p">,</span> <span class="ss">through: :students_reminders</span>
    <span class="k">end</span>

    <span class="k">class</span> <span class="nc">StudentsReminder</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
      <span class="n">belongs_to</span> <span class="ss">:students</span>
      <span class="n">belongs_to</span> <span class="ss">:reminders</span>
    <span class="k">end</span>

    <span class="k">class</span> <span class="nc">Reminder</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
      <span class="n">has_many</span> <span class="ss">:students_reminders</span>
      <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">through: :students_reminders</span>
    <span class="k">end</span>
</code></pre></div>    </div>
    <p><br /></p>

    <p><em>Has Many Through</em> is a more flexible approach because now we can work with
  StudentsReminder model as well.
  <br />
  <br /></p>
  </li>
  <li><strong>Polymorphic One-to-Many</strong>: In <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">Polymorphic association</a>, the model belongs to more than one other models,
on a single association. For example, a photo model can belong to either Student or Teacher.
 <br />
  <br />
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">Photo</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">belongs_to</span> <span class="ss">:identification</span><span class="p">,</span> <span class="ss">polymorphic: </span><span class="kp">true</span>
 <span class="k">end</span>

 <span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">has_many</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">as: :identification</span>
 <span class="k">end</span>

 <span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">has_many</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">as: :identification</span>
 <span class="k">end</span>
</code></pre></div>    </div>
    <p><br />
While setting up <em>Polymorphic Association</em> we must declare <em>Foregin Key</em> column and a <em>Type</em> column in the Photos model.</p>

    <p>Now, that we are done with setting up , we can go ahead and access the photos belonging to students and teachers.<br />
From an instance of Student we can say, <code class="language-plaintext highlighter-rouge">@student.photos</code>.<br />
And, from an instance of Teacher model, <code class="language-plaintext highlighter-rouge">@teacher.photos</code>.</p>

    <p>How amazing is that!</p>
  </li>
</ol>
:ET
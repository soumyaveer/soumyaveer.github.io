I"6<p>When I started learning Ruby, I was confused between strings and symbols. The purpose of symbols was quite unclear. I found myself asking this question over and over again, if symbols and strings both can be used interchangeably, why use symbols at all? It was later that I realized the elegance of symbols and the differences between the two - <code class="language-plaintext highlighter-rouge">String</code> and <code class="language-plaintext highlighter-rouge">Symbol</code>.</p>

<p><em>What are <strong>Strings</strong> ?</em>
Anything inside the <em>quotations</em> is a string. They are the instances of <code class="language-plaintext highlighter-rouge">String</code> class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="s1">'Hi! I am a string in single quotations.'</span> 
   <span class="s2">"Hi! I am also a string but in double quotations."</span>
  
</code></pre></div></div>

<p><em>What are <strong>Symbols</strong> ?</em>
 Symbols are instances of class <code class="language-plaintext highlighter-rouge">Symbol</code>. They can be identified by <code class="language-plaintext highlighter-rouge">:</code> in front of them.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="ss">:a_symbol</span>
    <span class="ss">:another_symbol</span>
</code></pre></div></div>

<p><strong>Symbols</strong> and <strong>Strings</strong> are often seen used interchangeably, but they are actually quite different.</p>

<ol>
  <li>
    <p><strong>Symbols</strong> are <em>immutable</em>. You cannot append another symbol to an existing symbol and create a new symbol.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> irb(main):171:0&gt; :a &lt;&lt; :b
 NoMethodError: undefined method `&lt;&lt;' for :a:Symbol
</code></pre></div>    </div>

    <p><strong>Strings</strong> are <em>mutable</em>. You can append another string to an existing string and create a new string.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> irb(main):005:0&gt; "a" &lt;&lt; "b"
 =&gt; "ab"
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Symbols</strong> are <em>unique</em>. Same symbol will always represent the same object. Symbols are saved in <code class="language-plaintext highlighter-rouge">symbol_table</code>, every time we try to access a symbol, it is retrieved from the table, hence pointing to the same symbol.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  irb(main):041:0&gt; var1 = :a
  =&gt; :a
  irb(main):042:0&gt; var2 = :a
  =&gt; :a
  irb(main):043:0&gt; var1.object_id
  =&gt; 723868
  irb(main):044:0&gt; var2.object_id
  =&gt; 723868  # var1 and var2 are pointing to the same object
</code></pre></div>    </div>

    <p><strong>Strings</strong> are <em>not unique</em> . Same strings may represent different object. Creating two strings may result is creation of a new instance of class <code class="language-plaintext highlighter-rouge">String</code> for each.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  irb(main):045:0&gt; var3 = "a"
  =&gt; "a"
  irb(main):046:0&gt; var4 = "a"
  =&gt; "a"
  irb(main):047:0&gt; var3.object_id
  =&gt; 70276725479300
  irb(main):048:0&gt; var4.object_id
  =&gt; 70276725462500  #var3 and var4 are pointing to different objects
</code></pre></div>    </div>
  </li>
  <li>
    <p>The presence of a <strong>symbol</strong> cannot be tested using <code class="language-plaintext highlighter-rouge">include?</code> method. As soon as you execute <code class="language-plaintext highlighter-rouge">include?</code>, it adds the symbol to the <code class="language-plaintext highlighter-rouge">symbol_table</code> and returns <code class="language-plaintext highlighter-rouge">true</code>. In order to test a symbol, we need to use <code class="language-plaintext highlighter-rouge">grep</code>.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  irb(main):050:0&gt; Symbol.all_symbols.grep(/pqr/)
  =&gt; []
  irb(main):052:0&gt; Symbol.all_symbols.include?(:pqr)
  =&gt; true
</code></pre></div>    </div>

    <p><strong>Strings</strong> can be tested using <code class="language-plaintext highlighter-rouge">include?</code> method.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  irb(main):006:0&gt; "I am a string pqr".include?("pqr")
  =&gt; true
</code></pre></div>    </div>
  </li>
  <li>
    <p>As stated above, <strong>Symbols</strong> are saved in <code class="language-plaintext highlighter-rouge">symbol_table</code>. Every time a new symbol is created, it is stored in the table.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> irb(main):010:0&gt; Symbol.all_symbols.count
 =&gt; 3488
 irb(main):011:0&gt; :new_symbol
 =&gt; :new_symbol
 irb(main):012:0&gt; Symbol.all_symbols.count
 =&gt; 3489 #=&gt; count increased by 1
</code></pre></div>    </div>

    <p><strong>String</strong> have no such table.</p>
  </li>
  <li>
    <p>Finally, Ruby can process <strong>Symbols</strong> faster because no new memory is allocated when they are referenced elsewhere.</p>

    <p>Ruby processes <strong>strings</strong> slower than symbols.</p>
  </li>
</ol>

<p>These are few important differences between Symbols and Strings.</p>
:ET
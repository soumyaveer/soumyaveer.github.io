I"E <p><strong>Variables</strong> are the places in memory locations that hold data. Every programming language provides variables including Ruby.</p>

<p>Ruby has four types of variables:</p>

<ol>
  <li>
    <p><strong>Global Variables</strong>: A global variable has a name beginning with <code class="language-plaintext highlighter-rouge">$</code>. It can be referred to from anywhere in a program. Before initialization, a global variable has the special value <code class="language-plaintext highlighter-rouge">nil</code>.</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">$FILE_PATH</span> <span class="o">=</span> <span class="s2">"/store/albums/songs"</span> <span class="c1">#global variable. Scope - complete program. </span>

<span class="k">class</span> <span class="nc">Album</span>
<span class="k">end</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Local Variables</strong>: Local variables begin with a lowercase letter or an underscore. The scope of a local variable is confined to the code construct within which it is declared.</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      
<span class="k">class</span> <span class="nc">Album</span>
  <span class="k">def</span> <span class="nf">song</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="s1">'Shape of you'</span>  <span class="c1"># name is a local variable. Not accessible outside this method. It's scope is limited to only this method.</span>
  <span class="k">end</span>
<span class="k">end</span>
      
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Class Variables</strong>: Class variables begin with <code class="language-plaintext highlighter-rouge">@@</code> and are shared by all instances of the class that it is defined in. A class variable is accessible to the entire class––it has <em>class scope</em>. Class variables store information regarding the class as a whole.</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        
   <span class="k">class</span> <span class="nc">Album</span>
     <span class="vc">@@album_count</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#class variable. Accessible to entire class.</span>
   <span class="k">end</span>
         
</code></pre></div>    </div>

    <ul>
      <li>
        <p>Can class variables be accessed from class methods?</p>

        <p>Yes, class variables can be accessed by class methods.</p>

        <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Album</span>
    <span class="vc">@@artist</span> <span class="o">=</span> <span class="s2">"Ed Sheereen"</span>
    
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">artist</span>
      <span class="c1"># Return the value of this variable</span>
      <span class="vc">@@artist</span>
    <span class="k">end</span>
  <span class="k">end</span>
            
  <span class="nb">p</span> <span class="no">Album</span><span class="p">.</span><span class="nf">artist</span> <span class="c1">#=&gt; "Ed Sheereen</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Can class variables be access from instance methods?</p>

        <p>Yes, class variables can be accessed from instance methods.</p>

        <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Album</span>
    <span class="vc">@@artist</span> <span class="o">=</span> <span class="s2">"Ed Sheereen"</span>
    
    <span class="k">def</span> <span class="nf">artist</span>
      <span class="c1"># Return the value of this variable</span>
      <span class="vc">@@artist</span>
    <span class="k">end</span>
  <span class="k">end</span>
            
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="p">.</span><span class="nf">new</span>
  <span class="nb">p</span> <span class="n">album</span><span class="p">.</span><span class="nf">artist</span> <span class="c1">#=&gt; "Ed Sheereen</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Instance Variables</strong>: An instance variable has a name beginning with <code class="language-plaintext highlighter-rouge">@</code>, and its scope is confined to whatever object <code class="language-plaintext highlighter-rouge">self</code> refers to. Two different objects, even if they belong to the same class, are allowed to have different values for their instance variables. From outside the object, instance variables cannot be altered or even observed (i.e., ruby’s instance variables are never public) except by whatever methods are explicitly provided by the programmer.</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">Album</span>
  <span class="k">def</span> <span class="nf">songs</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="s1">'Shape of you'</span> <span class="c1">#instance variable.</span>
  <span class="k">end</span>
        
  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="vi">@name</span><span class="p">.</span><span class="nf">capitalize</span>  <span class="c1">#accessible inside class</span>
  <span class="k">end</span>          
 <span class="k">end</span>
           
</code></pre></div>    </div>

    <ul>
      <li>
        <p>Can instance variables be accessed from class methods?</p>

        <p>No, instance variables cannot be accessed from class methods.</p>

        <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Album</span>
    <span class="k">def</span> <span class="nf">artist</span>
      <span class="vi">@artist</span> <span class="o">=</span> <span class="s2">"Ed Sheereen"</span> 
    <span class="k">end</span>
            
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">fav_artist</span>
      <span class="vi">@artist</span><span class="p">.</span><span class="nf">upcase</span>
    <span class="k">end</span>

   <span class="k">end</span>
            
  <span class="nb">p</span> <span class="no">Album</span><span class="p">.</span><span class="nf">artist</span> <span class="c1"># =&gt; "Ed Sheereen"</span>
  <span class="nb">p</span> <span class="no">Album</span><span class="p">.</span><span class="nf">fav_artist</span> <span class="c1">#=&gt; Error. upcase on undefined</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Can instance variables be accessed from instance methods?</p>

        <p>Yes, instance variables can be accessed from instance methods.</p>

        <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Album</span>
    <span class="k">def</span> <span class="nf">artist</span>
       <span class="vi">@artist</span> <span class="o">=</span> <span class="s2">"Ed Sheereen"</span>
    <span class="k">end</span>
                     
    <span class="k">def</span> <span class="nf">fav_artist</span>
       <span class="vi">@artist</span><span class="p">.</span><span class="nf">upcase</span>
    <span class="k">end</span>
  <span class="k">end</span>
            
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="p">.</span><span class="nf">new</span>          
  <span class="nb">p</span> <span class="n">album</span><span class="p">.</span><span class="nf">artist</span> <span class="c1"># =&gt; "Ed Sheereen"</span>
  <span class="nb">p</span> <span class="n">album</span><span class="p">.</span><span class="nf">fav_artist</span> <span class="c1">#=&gt; "ED SHEEREEN"</span>
        
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>
:ET